scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    user(
      id: ID @eq
      email: String @eq
    ): User @find

    users(
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    post(
        id: ID @eq
    ): Post @find

    posts: [Post!]! @guard @paginate(defaultCount: 10) @orderBy(column: "created_at", direction: DESC)

    postsResolver: [Post!]! @field(resolver: "App\\GraphQL\\Queries\\PostsResolver")
    postResolver(id: ID!): Post! @field(resolver: "App\\GraphQL\\Queries\\PostResolver")
}

type Mutation {
    createPost(
        user_id: ID!
        title: String! @rules(apply: ["required", "min:3"])
        body: String! @rules(apply: ["required", "min:3"])
    ): Post @create

    createPostResolver(
        user_id: ID!
        title: String! @rules(apply: ["required", "min:3"])
        body: String! @rules(apply: ["required", "min:3"])
    ): Post @field(resolver: "App\\GraphQL\\Mutations\\CreatePostResolver")

    updatePost(
        id: ID!
        title: String! @rules(apply: ["required", "min:3"])
        body: String! @rules(apply: ["required", "min:3"])
    ): Post @update

    deletePost(
        id: ID! @whereKey
    ): Post! @delete

    loginTest(
        email: String!
        password: String!
        deviceName: String!
    ): AccessTokenTest! @field(resolver: "App\\GraphQL\\Mutations\\LoginTestResolver")
}

type AccessTokenTest {
    token: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    posts: [Post!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Post {
    id: ID!
    title: String!
    body: String!
    user: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}
